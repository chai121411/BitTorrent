package GivenTools;

import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Arrays;

/**
 * @author chai1
 * @author trw63
 *
 */

public class Peer {
	private String peer_id;
	private String peer_ip;
	private int peer_port;
	
	/**
	 * used in openSocket()
	 */
//	private Socket peerSocket;
//	private DataOutputStream toPeer;
//	private DataInputStream fromPeer;
	
	public Peer(String id, String ip, int port) {
		peer_id = id;
		peer_ip = ip;
		peer_port = port;
	}
	
	public String getPeerID() {
		return peer_id;
	}
	
	public String getPeerIP() {
		return peer_ip;
	}
	
	public int getPeerPort() {
		return peer_port;
	}

	public void tryHandshakeAndDownload(byte[] info_hash, String generatedPeerID) {
		Socket peerSocket;
    	DataOutputStream toPeer;
    	DataInputStream fromPeer;
		
	    try {
	    	peerSocket = new Socket(peer_ip, peer_port);
	    	toPeer = new DataOutputStream(peerSocket.getOutputStream());
			fromPeer = new DataInputStream(peerSocket.getInputStream());
			
			byte[] handshakeHeader = createHandshakeHeader(info_hash, generatedPeerID);
			//Perform handshake?
	
			//Verify hash from peer? close connection if not same
			
			//Download file?
	    }	
	    catch (IOException e) {
	        System.out.println(e);
	    }
	}
	
	/**
	 * Handshaking between peers begins with byte nineteen followed by the string 'BitTorrent protocol'.
	 ** After the fixed headers are 8 reserved bytes which are set to 0. 
	 * Next is the 20-byte SHA-1 hash of the bencoded form of the info value from the metainfo (.torrent) file.
	 * The next 20-bytes are the peer id generated by the client. 
	 * The info_hash should be the same as sent to the tracker, and the peer_id is the same as sent to the tracker. 
	 * If the info_hash is different between two peers, then the connection is dropped.
	 **/
	private byte[] createHandshakeHeader(byte[] info_hash, String generatedPeerID) {
		ByteArrayOutputStream header = new ByteArrayOutputStream();
		byte[] fixedHeader = {19, 'B','i','t','T','o','r','r','e','n','t',' ', 'p','r','o','t','o','c','o','l',0,0,0,0,0,0,0,0};
		System.out.println(fixedHeader);
		try {
			header.write(fixedHeader);
			header.write(info_hash);
			header.write(generatedPeerID.getBytes());
		} catch (IOException e) {
			System.out.println("Failed to generate handshake header.");
		}
		
		return header.toByteArray();
	}
	
	//Maybe create another class to do handshake...? 
	@SuppressWarnings("unused")
	private void handshakePeer() {
		
	}
	
	//Use Arrays.equals() if you want to compare the actual content of arrays that contain primitive types values (like byte).
	//Checks the info_hash from torrent info and a peer
	public boolean checkInfoHash(byte[] info_hash, byte[] peersHash) {
		if (Arrays.equals(info_hash, peersHash)) {
			return true;
		} else {
			return false;
		}
	}
	
	public void printPeer() {
		System.out.println("---"); 
		System.out.println("peerID: " + getPeerID());
		System.out.println("peerIP: " + getPeerIP());
		System.out.println("peerPort: " + getPeerPort());
	}
}